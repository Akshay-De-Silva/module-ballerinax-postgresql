import org.apache.tools.ant.taskdefs.condition.Os

/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'java'

description = 'Ballerina - Postgresql Examples'

def ballerinaModulePath = "${project.rootDir}/postgresql-ballerina/"
def ballerinaDistPath = "${ballerinaModulePath}/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def ballerinaDist = "${buildDir}/target/ballerina-distribution"
def examples = ["atomic-batch-operation", "batch-operation", "call-stored-procedures", "complex-queries-operation", "execute-operation", "query-operation"]

task copyDistribution(type: Copy) {
    from ballerinaDistPath
    into ballerinaDist
}

task copyPackageBala {
    doLast {
        copy {
            from "${ballerinaModulePath}/build/cache_parent"
            into "${ballerinaDist}/repo"
            copy {
                into("bala/ballerina") {
                    from "bala/ballerina"
                }
            }
            copy {
                into("cache/ballerina/") {
                    from "cache/ballerina"
                }
            }
        }
    }
}

task buildExamples {
    doLast {
        examples.each { example ->
            def ballerinaConfigFile = new File("${project.projectDir}/${example}/Ballerina.toml")
            def ballerinaDependencyFile = new File("${project.projectDir}/${example}/Dependencies.toml")
            def originalConfig = ballerinaConfigFile.text
            def originalDependencies = ballerinaDependencyFile.text

            def stdlibDependentSqlVersion = stripBallerinaExtensionVersion(project.stdlibSqlVersion)
            def moduleVersion = "${project.version}".replace("-SNAPSHOT", "")

            def newConfig = ballerinaConfigFile.text.replace('@driver.version@', project.postgreSQLDriverVersion)
            newConfig = newConfig.replace('@project.rootDir@', ballerinaModulePath)
            ballerinaConfigFile.text = newConfig;

            def newDependenciesTomlText = ballerinaDependencyFile.text.replace("@project.version@", moduleVersion)
            newDependenciesTomlText = newDependenciesTomlText.replace('@stdlib.sql.version@', stdlibDependentSqlVersion)
            ballerinaDependencyFile.text = newDependenciesTomlText

            try {
                exec {
                    workingDir project.projectDir
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat run ${example} && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal run ${example}"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Build failed: " + e.message)
                throw e
            } finally {
                ballerinaConfigFile.text = originalConfig
                ballerinaDependencyFile.text = originalDependencies
            }
        }
    }
}

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

def testContainerName = "ballerina-postgresql-example-container"

task createExampleDockerImage(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker build -f ${project.projectDir}/resources/Dockerfile -t ballerina-postgresql" +
                " -q ${project.projectDir}/resources/"
        doLast {
            checkExecResult(execResult, 'Error', standardOutput)
            sleep(10 * 1000)
        }
    }
}

def checkExecResult(execResult, failText, standardOutput){
    if (execResult) {
        if (execResult.getExitValue() != 0) {
            throw new GradleException('Non-zero exit value: ' + execResult.getExitValue())
        }
        if (standardOutput.toString().contains(failText)){
            throw new GradleException('"' + failText + '" string in output: ' + standardOutput.toString())
        }
    } else {
        throw new GradleException('Returned a null execResult object')
    }
}

def checkExampleDockerContainerStatus(containerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        try {
            return exec {
                commandLine 'sh', '-c', "docker exec ${containerName} psql -U postgres -h localhost -p 5432"
            }.exitValue
        } catch (all) {
            return 1;
        }
    }
}

task startExampleDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker run --rm -d --name ${testContainerName} -e POSTGRES_PASSWORD=postgres -e POSTGRES_HOST_AUTH_METHOD=trust -p 5432:5432 -d ballerinax-postgresql"

        def healthCheck = 1;
        def counter = 0;
        doLast {
            checkExecResult(execResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(5 * 1000)
                healthCheck = checkExampleDockerContainerStatus(testContainerName)
                counter = counter + 1;
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container '${testContainerName}' health test exceeded timeout!")
            }
        }
    }
}

task stopExampleDockerContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', "docker stop ${testContainerName}"
                    standardOutput = stdOut
                }
            } catch (all) {
                println("Process can safely ignore stopTestDockerContainer task")
            }
        }
    }
}

startExampleDockerContainer.dependsOn createExampleDockerImage
copyDistribution.dependsOn ":postgresql-ballerina:build"
copyPackageBala.dependsOn copyDistribution
buildExamples.dependsOn copyPackageBala
buildExamples.dependsOn startExampleDockerContainer
build.dependsOn buildExamples
build.finalizedBy stopExampleDockerContainer
